// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FairmaticSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import BackgroundTasks
import CoreData
import DriveKitCoreModule
import DriveKitTripAnalysisModule
@_exported import FairmaticSDK
import Foundation
import Network
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(FairmaticError) public enum FairmaticError : Swift.Int {
  case invalidSDKKeyString = 0
  case networkUnreachable = 1
  case unsupportedOSVersion = 2
  case deviceUnsupported = 3
  case invalidDriverId = 101
  case internalFailure = 102
  case notSetup = 103
  case insurancePeriodSame = 104
  case invalidTrackingId = 105
  case notTornDown = 106
  case ioError = 107
  case userDeprovisioned = 111
  case fleetSizeLimitExceeded = 1002
  case driverDeleted = 1003
  case invalidDriverName = 1004
  case setupAlreadyInProgress = 1005
  case accountNotProvisioned = 1006
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FairmaticSDK.FairmaticError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc(FairmaticSettingsErrorType) public enum SettingsErrorType : Swift.Int {
  case locationPermissionNotAuthorized = 0
  case activityPermissionNotAuthorized = 1
  case locationAccuracyAuthorizationReduced = 2
  case locationServiceOff = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FairmaticSettingsError) public class SettingsError : ObjectiveC.NSObject {
  @objc final public let errorType: FairmaticSDK.SettingsErrorType
  @objc deinit
}
@objc(FairmaticSDKHealthReason) public enum SDKHealthReason : Swift.Int {
  case unknown
  case silentPushNotification
  case backgroundProcessing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FairmaticSettings) public class Settings : ObjectiveC.NSObject {
  @objc final public let errors: [FairmaticSDK.SettingsError]
  @objc deinit
}
@objc(FairmaticConfiguration) public class Configuration : ObjectiveC.NSObject {
  @objc public var sdkKey: Swift.String
  @objc public var driverId: Swift.String
  @objc public var driverAttributes: FairmaticSDK.DriverAttributes
  @objc public init(sdkKey: Swift.String, driverId: Swift.String, driverAttributes: FairmaticSDK.DriverAttributes)
  @objc deinit
}
@objc(FairmaticDriverAttributes) public class DriverAttributes : ObjectiveC.NSObject {
  @objc public init(firstName: Swift.String, lastName: Swift.String, email: Swift.String?, phoneNumber: Swift.String?)
  @objc deinit
}
@objc(FairmaticInsurancePeriod) public enum InsurancePeriod : Swift.Int {
  case period1
  case period2
  case period3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias InsuranceAPICompletionHandler = ((Swift.Bool, (any Swift.Error)?) -> Swift.Void)
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc(Fairmatic) final public class Fairmatic : ObjectiveC.NSObject {
  @objc public static func setupWith(configuration: FairmaticSDK.Configuration, completionHandler handler: ((_ success: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func teardown(completionHandler handler: (() -> Swift.Void)? = nil)
  @objc public static func wipeOut(completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public static var buildVersion: Swift.String {
    @objc get
  }
  @objc public static func getSettings(completionHandler: @escaping (FairmaticSDK.Settings) -> Swift.Void)
  @objc public static func logSDKHealth(_ reason: FairmaticSDK.SDKHealthReason, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
extension FairmaticSDK.Fairmatic {
  @objc public static func startDriveWithPeriod1(_ trackingId: Swift.String, completionHandler: FairmaticSDK.InsuranceAPICompletionHandler?)
  @objc public static func startDriveWithPeriod2(_ trackingId: Swift.String, completionHandler: FairmaticSDK.InsuranceAPICompletionHandler?)
  @objc public static func startDriveWithPeriod3(_ trackingId: Swift.String, completionHandler: FairmaticSDK.InsuranceAPICompletionHandler?)
  @objc public static func stopPeriod(_ completionHandler: FairmaticSDK.InsuranceAPICompletionHandler?)
}
extension FairmaticSDK.FairmaticError : Swift.Equatable {}
extension FairmaticSDK.FairmaticError : Swift.Hashable {}
extension FairmaticSDK.FairmaticError : Swift.RawRepresentable {}
extension FairmaticSDK.SDKHealthReason : Swift.Equatable {}
extension FairmaticSDK.SDKHealthReason : Swift.Hashable {}
extension FairmaticSDK.SDKHealthReason : Swift.RawRepresentable {}
extension FairmaticSDK.SettingsErrorType : Swift.Equatable {}
extension FairmaticSDK.SettingsErrorType : Swift.Hashable {}
extension FairmaticSDK.SettingsErrorType : Swift.RawRepresentable {}
extension FairmaticSDK.InsurancePeriod : Swift.Equatable {}
extension FairmaticSDK.InsurancePeriod : Swift.Hashable {}
extension FairmaticSDK.InsurancePeriod : Swift.RawRepresentable {}
